***************
*** 1,286 ****
- /**************************************************************************
- **
- ** This file is part of Qt Creator
- **
- ** Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
- **
- ** Contact:  Qt Software Information (qt-info@nokia.com)
- **
- ** Commercial Usage
- **
- ** Licensees holding valid Qt Commercial licenses may use this file in
- ** accordance with the Qt Commercial License Agreement provided with the
- ** Software or, alternatively, in accordance with the terms contained in
- ** a written agreement between you and Nokia.
- **
- ** GNU Lesser General Public License Usage
- **
- ** Alternatively, this file may be used under the terms of the GNU Lesser
- ** General Public License version 2.1 as published by the Free Software
- ** Foundation and appearing in the file LICENSE.LGPL included in the
- ** packaging of this file.  Please review the following information to
- ** ensure the GNU Lesser General Public License version 2.1 requirements
- ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
- **
- ** If you are unsure which license is appropriate for your use, please
- ** contact the sales department at qt-sales@nokia.com.
- **
- **************************************************************************/
- 
- #include "qtsingleapplication.h"
  
  #include <extensionsystem/pluginmanager.h>
- #include <extensionsystem/pluginspec.h>
- #include <extensionsystem/iplugin.h>
- 
- #include <QtCore/QDir>
- #include <QtCore/QTextStream>
- #include <QtCore/QFileInfo>
- #include <QtCore/QDebug>
- #include <QtCore/QTimer>
- 
- #include <QtGui/QMessageBox>
- #include <QtGui/QApplication>
- #include <QtGui/QMainWindow>
- 
- #ifdef Q_OS_DARWIN
- #  include <sys/resource.h>
- #endif
- 
- enum { OptionIndent = 4, DescriptionIndent = 24 };
- 
- static const char *appNameC = "Qt Creator";
- static const char *corePluginNameC = "Core";
- static const char *fixedOptionsC =
- " [OPTION]... [FILE]...\n"
- "Options:\n"
- "    -help               Display this help\n"
- "    -version            Display program version\n"
- "    -client             Attempt to connect to already running instance\n";
- 
- static const char *HELP_OPTION1 = "-h";
- static const char *HELP_OPTION2 = "-help";
- static const char *HELP_OPTION3 = "/h";
- static const char *HELP_OPTION4 = "--help";
- static const char *VERSION_OPTION = "-version";
- static const char *CLIENT_OPTION = "-client";
- 
- typedef QList<ExtensionSystem::PluginSpec *> PluginSpecSet;
- 
- // Helpers for displaying messages. Note that there is no console on Windows.
- #ifdef Q_WS_WIN
- // Format as <pre> HTML
- static inline void toHtml(QString &t)
- {
-     t.replace(QLatin1Char('&'), QLatin1String("&amp;"));
-     t.replace(QLatin1Char('<'), QLatin1String("&lt;"));
-     t.replace(QLatin1Char('>'), QLatin1String("&gt;"));
-     t.insert(0, QLatin1String("<html><pre>"));
-     t.append(QLatin1String("</pre></html>"));
- }
- 
- static void displayHelpText(QString t) // No console on Windows.
- {
-     toHtml(t);
-     QMessageBox::information(0, QLatin1String(appNameC), t);
- }
- 
- static void displayError(const QString &t) // No console on Windows.
- {
-     QMessageBox::critical(0, QLatin1String(appNameC), t);
- }
- 
- #else
- 
- static void displayHelpText(const QString &t)
- {
-     qWarning("%s", qPrintable(t));
- }
- 
- static void displayError(const QString &t)
- {
-     qCritical("%s", qPrintable(t));
- }
- 
- #endif
- 
- static void printVersion(const ExtensionSystem::PluginSpec *coreplugin,
-                          const ExtensionSystem::PluginManager &pm)
- {
-     QString version;
-     QTextStream str(&version);
-     str << '\n' << appNameC << ' ' << coreplugin->version()<< " based on Qt " << qVersion() << "\n\n";
-     pm.formatPluginVersions(str);
-     str << '\n' << coreplugin->copyright() << '\n';
-     displayHelpText(version);
- }
- 
- static void printHelp(const QString &a0, const ExtensionSystem::PluginManager &pm)
- {
-     QString help;
-     QTextStream str(&help);
-     str << "Usage: " << a0  << fixedOptionsC;
-     ExtensionSystem::PluginManager::formatOptions(str, OptionIndent, DescriptionIndent);
-     pm.formatPluginOptions(str,  OptionIndent, DescriptionIndent);
-     displayHelpText(help);
- }
  
- static inline QString msgCoreLoadFailure(const QString &why)
- {
-     return QCoreApplication::translate("Application", "Failed to load core: %1").arg(why);
- }
  
- static inline QString msgSendArgumentFailed()
- {
-     return QCoreApplication::translate("Application", "Unable to send command line arguments to the already running instance. It appears to be not responding.");
- }
- 
- // Prepare a remote argument: If it is a relative file, add the current directory
- // since the the central instance might be running in a different directory.
- 
- static inline QString prepareRemoteArgument(const QString &a)
- {
-     QFileInfo fi(a);
-     if (!fi.exists())
-         return a;
-     if (fi.isRelative())
-         return fi.absoluteFilePath();
-     return a;
  }
  
- // Send the arguments to an already running instance of Qt Creator
- static bool sendArguments(SharedTools::QtSingleApplication &app, const QStringList &arguments)
  {
-     if (!arguments.empty()) {
-         // Send off arguments
-         const QStringList::const_iterator acend = arguments.constEnd();
-         for (QStringList::const_iterator it = arguments.constBegin(); it != acend; ++it) {
-             if (!app.sendMessage(prepareRemoteArgument(*it))) {
-                 displayError(msgSendArgumentFailed());
-                 return false;
-             }
-         }
-     }
-     // Special empty argument means: Show and raise (the slot just needs to be triggered)
-     if (!app.sendMessage(QString())) {
-         displayError(msgSendArgumentFailed());
-         return false;
-     }
-     return true;
- }
- 
- static inline QStringList getPluginPaths()
- {
-     QStringList rc;
-     // Figure out root:  Up one from 'bin'
-     QDir rootDir = QApplication::applicationDirPath();
-     rootDir.cdUp();
-     const QString rootDirPath = rootDir.canonicalPath();
-     // 1) "plugins" (Win/Linux)
-     QString pluginPath = rootDirPath;
-     pluginPath += QDir::separator();
-     pluginPath += QLatin1String("lib");
-     pluginPath += QDir::separator();
-     pluginPath += QLatin1String("qtcreator");
-     pluginPath += QDir::separator();
-     pluginPath += QLatin1String("plugins");
-     rc.push_back(pluginPath);
-     // 2) "PlugIns" (OS X)
-     pluginPath = rootDirPath;
-     pluginPath += QDir::separator();
-     pluginPath += QLatin1String("PlugIns");
-     rc.push_back(pluginPath);
-     return rc;
  }
  
  int main(int argc, char **argv)
- {
- #ifdef Q_OS_DARWIN
-     // increase the number of file that can be opened in Qt Creator.
-     struct rlimit rl;
-     getrlimit(RLIMIT_NOFILE, &rl);
-     rl.rlim_cur = rl.rlim_max;
-     setrlimit(RLIMIT_NOFILE, &rl);
  #endif
- 
-     SharedTools::QtSingleApplication app((QLatin1String(appNameC)), argc, argv);
-     // Load
-     ExtensionSystem::PluginManager pluginManager;
-     pluginManager.setFileExtension(QLatin1String("pluginspec"));
- 
-     const QStringList pluginPaths = getPluginPaths();
-     pluginManager.setPluginPaths(pluginPaths);
- 
-     const QStringList arguments = app.arguments();
-     QMap<QString, QString> foundAppOptions;
-     if (arguments.size() > 1) {
-         QMap<QString, bool> appOptions;
-         appOptions.insert(QLatin1String(HELP_OPTION1), false);
-         appOptions.insert(QLatin1String(HELP_OPTION2), false);
-         appOptions.insert(QLatin1String(HELP_OPTION3), false);
-         appOptions.insert(QLatin1String(HELP_OPTION4), false);
-         appOptions.insert(QLatin1String(VERSION_OPTION), false);
-         appOptions.insert(QLatin1String(CLIENT_OPTION), false);
-         QString errorMessage;
-         if (!pluginManager.parseOptions(arguments,
-                                         appOptions,
-                                         &foundAppOptions,
-                                         &errorMessage)) {
-             displayError(errorMessage);
-             printHelp(QFileInfo(app.applicationFilePath()).baseName(), pluginManager);
-             return -1;
-         }
-     }
- 
-     const PluginSpecSet plugins = pluginManager.plugins();
-     ExtensionSystem::PluginSpec *coreplugin = 0;
-     foreach (ExtensionSystem::PluginSpec *spec, plugins) {
-         if (spec->name() == QLatin1String(corePluginNameC)) {
-             coreplugin = spec;
-             break;
-         }
-     }
-     if (!coreplugin) {
-         const QString reason = QCoreApplication::translate("Application", "Couldn't find 'Core.pluginspec' in %1").arg(pluginPaths.join(QLatin1String(",")));
-         displayError(msgCoreLoadFailure(reason));
-         return 1;
-     }
-     if (coreplugin->hasError()) {
-         displayError(msgCoreLoadFailure(coreplugin->errorString()));
-         return 1;
-     }
-     if (foundAppOptions.contains(QLatin1String(VERSION_OPTION))) {
-         printVersion(coreplugin, pluginManager);
-         return 0;
-     }
-     if (foundAppOptions.contains(QLatin1String(HELP_OPTION1))
-             || foundAppOptions.contains(QLatin1String(HELP_OPTION2))
-             || foundAppOptions.contains(QLatin1String(HELP_OPTION3))
-             || foundAppOptions.contains(QLatin1String(HELP_OPTION4))) {
-         printHelp(QFileInfo(app.applicationFilePath()).baseName(), pluginManager);
-         return 0;
-     }
- 
-     const bool isFirstInstance = !app.isRunning();
-     if (!isFirstInstance && foundAppOptions.contains(QLatin1String(CLIENT_OPTION)))
-         return sendArguments(app, pluginManager.arguments()) ? 0 : -1;
- 
-     pluginManager.loadPlugins();
-     if (coreplugin->hasError()) {
-         displayError(msgCoreLoadFailure(coreplugin->errorString()));
-         return 1;
-     }
-     if (isFirstInstance) {
-         // Set up lock and remote arguments for the first instance only.
-         // Silently fallback to unconnected instances for any subsequent
-         // instances.
-         app.initialize();
-         QObject::connect(&app, SIGNAL(messageReceived(QString)), coreplugin->plugin(), SLOT(remoteArgument(QString)));
-     }
-     QObject::connect(&app, SIGNAL(fileOpenRequest(QString)), coreplugin->plugin(), SLOT(remoteArgument(QString)));
- 
-     // Do this after the event loop has started
-     QTimer::singleShot(100, &pluginManager, SLOT(startTests()));
-     return app.exec();
  }
- 
--- 1,150 ----
+ #include <QApplication>
+ #include <QMainWindow>
+ #include <QStatusBar>
+ #include <QLabel>
+ #include <QStringList>
+ #include <QProcess>
+ #include <QFileInfo>
+ #include <QDebug>
  
  #include <extensionsystem/pluginmanager.h>
+ #include <iplugin.h>
  
+ #include <debuggermanager.h>
+ #include <debuggerplugin.h>
  
+ #include "mainwindow.h"
+ #include "modemanager.h"
+ #include "projectexplorer/projectexplorer.h"
+ #include "coreplugin/coreplugin.h"
+ #include "find/findplugin.h"
+ #include "quickopen/quickopenplugin.h"
+ #include "texteditor/texteditorplugin.h"
+ #include "cppeditor/cppplugin.h"
+ 
+ static void print_help(char* name)
+ {
+ 	qWarning("Usage:");
+ 	qWarning("    %s [OPTIONS ] [PROGRAMM [ ARGUMENTS ]]", name);
+ 	qWarning("Options:");
+ 	qWarning("  -v | --version           Print programm version");
+ 	qWarning("  -h | --help              Print this help");
+ 	qWarning("\nTODO: Possibility to attach to running process, remote debugging, transcript file");
+ 	qWarning("      waits for volunteer");
  }
  
+ static void print_version()
  {
+ 	qWarning("Beaver Debugger version 1.0.0.b2");
+ 	qWarning("www.beaverdbg.googlecode.com");
  }
  
  int main(int argc, char **argv)
+ {	
+ 	QApplication app (argc, argv);
+ 	
+ 	QStringList args;
+ 	for (int i = 1; i < argc; i++)
+ 	{
+ 		args << argv[i];
+ 	}
+ 	
+ 	QString targetFileName;
+ 	if (args.size() == 1 &&
+ 		(args[0] == "-h" ||
+ 		 args[0] == "--help"))
+ 	{
+ 		print_help(argv[0]);
+ 		return 0;
+ 	}
+ 	
+ 	if (args.size() == 1 &&
+ 		(args[0] == "-v" ||
+ 		 args[0] == "--version"))
+ 	{
+ 		print_version();
+ 		return 0;
+ 	}
+ 	
+ 	if (args.size() > 0)
+ 	{
+ 		QStringList path;
+ 		path << "" << ".";
+ 
+ 		QStringList env = QProcess::systemEnvironment();
+ 		foreach(QString var, env)
+ 		{
+ 			if (var.startsWith("PATH="))
+ 			{
+ 				var.remove(0, 5);
+ #ifdef Q_OS_WIN
+ 				QStringList pathDirs = var.split(";");
+ #else
+ 				QStringList pathDirs = var.split(":");
  #endif
+ 				path.append(pathDirs);
+ 			}
+ 		}
+ 		bool found  = false;
+ 		foreach(QString dir, path)
+ 		{
+ 			targetFileName = dir + "/" + args[0];
+ 			QFileInfo info(targetFileName);
+ 			if (info.isFile() && info.isExecutable())
+ 			{
+ 				found = true;
+ 				break;
+ 			}
+ 		}
+ 		if (found)
+ 		{
+ 			args.removeAt(0);
+ 		}
+ 		else
+ 		{
+ 			qWarning() << args[0] << "is not a valid executable file";
+ 			print_help(argv[0]);
+ 			return -1;
+ 		}
+ 	}
+ 	
+ 	ExtensionSystem::PluginManager pluginManager;
+ 	// for create instance
+ 	QString error;
+ 	
+ 	Core::Internal::CorePlugin *core = new Core::Internal::CorePlugin();
+ 	ProjectExplorer::ProjectExplorerPlugin *projectExplorer = new ProjectExplorer::ProjectExplorerPlugin();
+ 	Debugger::Internal::DebuggerPlugin *debugger = new Debugger::Internal::DebuggerPlugin();
+ 	Find::Internal::FindPlugin *find = new Find::Internal::FindPlugin();
+ 	//QuickOpen::Internal::QuickOpenPlugin quickOpen = new QuickOpen::Internal::QuickOpenPlugin();
+ 	TextEditor::Internal::TextEditorPlugin *textEditor = new TextEditor::Internal::TextEditorPlugin();
+ 	CppEditor::Internal::CppPlugin *cpp = new CppEditor::Internal::CppPlugin();
+ 	
+ 	core->initialize (QStringList(), &error);
+ 	projectExplorer->initialize(QStringList(), &error);
+ 	ExtensionSystem::IPlugin* i_debugger_plugin = static_cast<ExtensionSystem::IPlugin*>(debugger);
+ 	i_debugger_plugin->initialize (QStringList(), &error);	
+ 	find->initialize (QStringList(), &error);
+ 	//quickOpen.initialize (QStringList(), &error);
+ 	textEditor->initialize (QStringList(), &error);
+ 	cpp->initialize (QStringList(), &error);
+ 	
+ 	core->extensionsInitialized();
+ 	
+ 	if (! targetFileName.isEmpty())
+ 	{
+ 		debugger->startNewDebugger(targetFileName, args);
+ 	}
+ 	int res = app.exec();
+ 	
+ 	delete cpp;
+ 	delete textEditor;
+ 	//delete quickOpen;
+ 	delete find;
+ 	i_debugger_plugin->shutdown();
+ 	delete debugger;
+ 	delete projectExplorer;
+ 	delete core;
+ 	
+ 	return res;
  }
